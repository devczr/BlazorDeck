@page "/login"
@using BlazorDeck.Client.Authentication;
@inject HttpClient httpClient
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager


<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Log In</h3>
        </div>
        <div class="mb-3">
            <label>Username</label>
            <input @bind="loginRequest.Username" class="form=control" placeholder="Username" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="loginRequest.Password" class="form=control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Log In</button>
        </div>
    </div>
</div>

@code {

    private LoginRequest loginRequest = new();

    private async Task Authenticate()
    {
        var loginResponse = await httpClient.PostAsJsonAsync<LoginRequest>("/api/Account/Login", loginRequest);

        //successful api request
        if (loginResponse.IsSuccessStatusCode)
        {
            var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSession);

            //redirect user
            navManager.NavigateTo("/", true);
        }
        else if (loginResponse.StatusCode is System.Net.HttpStatusCode.Unauthorized)
        {
            await js.InvokeVoidAsync("alert", "Invalid username or password");
            return;
        }
    }
}
