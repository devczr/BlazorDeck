@page "/"
@using BlazorDeck.Client.Authentication;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject HttpClient httpClient
@inject IJSRuntime js
@inject ICardService CardService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject Microsoft.Extensions.Configuration.IConfiguration config;

<PageTitle>Home</PageTitle>

<AuthorizeView Context="auth">
    <Authorized>
        <MudDropContainer T="DropItem" Items="_items" ItemsSelector="@((item,dropzone) => item.Place == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-column flex-grow-1">
            <ChildContent>
                <MudDropZone T="DropItem" Identifier="World" CanDrop="@((item) => (item.Type == CardType.World || item.Type == CardType.Quest))" Class="rounded-lg mud-alert-text-success pa-4 ma-4 flex-grow-1">
                    <MudText Typo="Typo.button" Class="ma-2">World</MudText>
                </MudDropZone>
                <div class="d-flex flex-wrap justify-space-between">
                    <MudDropZone T="DropItem" Identifier="Mind" CanDrop="@((item) => item.Type == CardType.Mind)" Class="rounded-lg mud-alert-text-warning pa-4 ma-4 flex-grow-1">
                        <MudText Typo="Typo.button" Class="ma-2">Mind</MudText>
                    </MudDropZone>
                    <MudDropZone T="DropItem" Identifier="Heart" CanDrop="@((item) => item.Type == CardType.Heart)" Class="rounded-lg mud-alert-text-info pa-4 ma-4 flex-grow-1">
                        <MudText Typo="Typo.button" Class="ma-2">Heart</MudText>
                    </MudDropZone>
                </div>
                <MudDropZone T="DropItem" Identifier="Hand" CanDrop="@((item) => false)" Class="rounded-lg mud-alert-text-normal pa-4 mt-6 mx-4 flex-grow-1 d-flex flex-wrap"/>
            </ChildContent>
            <ItemRenderer>
                <MudPaper Elevation="25" Class="pa-4 ma-2">@context.Name</MudPaper>
            </ItemRenderer>
        </MudDropContainer>
    </Authorized>

    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>


@code {
    private List<DropItem> _items = new();

    protected override async Task OnInitializedAsync()
    {
        await CardService.GetCards();
        PlaceCards();
    }

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Place = dropItem.DropzoneIdentifier;
    }

    private void PlaceCards()
    {
        foreach (var card in CardService.Cards)
        {
            _items.Add(new DropItem()
                {
                    Name = card.Title,
                    Type = card.Type,
                    Place = "Hand"
                });
        }
    }



    public class DropItem
    {
        public string Name { get; set; }
        public CardType Type { get; set; }
        public string Place { get; set; }
    }

}