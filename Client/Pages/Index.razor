@page "/"
@using BlazorDeck.Client.Authentication;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@inject HttpClient httpClient
@inject IJSRuntime js
@inject ICardService CardService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject Microsoft.Extensions.Configuration.IConfiguration config;

<PageTitle>Home</PageTitle>

<MudDropContainer T="CardGameItem" @ref="_dropContainer" Items="_items" ItemsSelector="@((item,column) => item.Status == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
    <ChildContent>
        <MudGrid>

            <MudItem xs="12" Class="d-flex justify-center">
                @foreach (var item in _worldSections)
                {
                    <MudPaper Elevation="0" Width="160px" MinHeight="260px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
                        <MudToolBar DisableGutters="true">
                            <MudText Typo="Typo.subtitle1"><b>World</b></MudText>
                            <MudSpacer />
                            <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                                <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteWorldSection(item))">Delete Section</MudButton>
                                <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Add" OnClick="@( () => AddWorldSection())">Add Section</MudButton>
                            </MudMenu>
                        </MudToolBar>
                        <MudDropZone T="CardGameItem" Identifier="@item.Name" Class="d-flex mud-height-full align-center justify-center" />
                    </MudPaper>
                }
            </MudItem>

            <MudItem xs="6" Class="d-flex justify-center">
                @foreach (var item in _mindSections)
                {
                    <MudPaper Elevation="0" Width="160px" MinHeight="260px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
                        <MudToolBar DisableGutters="true">
                            <MudText Typo="Typo.subtitle1"><b>Mind</b></MudText>
                            <MudSpacer />
                            <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                                <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteMindSection(item))">Delete Section</MudButton>
                                <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Add" OnClick="@( () => AddMindSection())">Add Section</MudButton>
                            </MudMenu>
                        </MudToolBar>
                        <MudDropZone T="CardGameItem" Identifier="@item.Name" Class="d-flex mud-height-full align-center justify-center" />
                    </MudPaper>
                }
            </MudItem>

            <MudItem xs="6" Class="d-flex justify-center">
                @foreach (var item in _heartSections)
                {
                    <MudPaper Elevation="0" Width="160px" MinHeight="260px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
                        <MudToolBar DisableGutters="true">
                            <MudText Typo="Typo.subtitle1"><b>Heart</b></MudText>
                            <MudSpacer />
                            <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                                <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteHeartSection(item))">Delete Section</MudButton>
                                <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Add" OnClick="@( () => AddHeartSection())">Add Section</MudButton>
                            </MudMenu>
                        </MudToolBar>
                        <MudDropZone T="CardGameItem" Identifier="@item.Name" Class="d-flex mud-height-full align-center justify-center" />
                    </MudPaper>
                }
            </MudItem>

            <MudItem xs="12">
                <MudDropZone T="CardGameItem" Identifier="Hand" CanDrop="@((item) => false)" Class="rounded-lg mud-alert-text-normal pa-4 mt-6 mx-4 flex-grow-1 d-flex flex-wrap" />
            </MudItem>
        </MudGrid>


    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation="25" Class="d-flex flex-grow-1 align-center justify-center rounded-lg pa-0 my-0" Outlined="true" Width="132px" Height="228px">
            <MudContainer>
                <MudText>@context.Name</MudText>
            </MudContainer>
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>


@code {

    private MudDropContainer<CardGameItem> _dropContainer;

    private List<CardGameItem> _items = new();

    /* handling board events */
    protected override async Task OnInitializedAsync()
    {
        await CardService.GetCards();
        PlaceCards();
    }

    private void TaskUpdated(MudItemDropInfo<CardGameItem> info)
    {
        info.Item.Status = info.DropzoneIdentifier;
    }

    private void PlaceCards()
    {
        foreach (var card in CardService.Cards)
        {
            _items.Add(new CardGameItem(card.Title, card.Type, "Hand"));
        }
    }

    /* Setup for board  */
    public class CardGameItem
    {
        public string Name { get; set; }
        public string Status { get; set; }
        public CardType Type { get; set; }


        public CardGameItem(string name, CardType type, string status)
        {
            Name = name;
            Type = type;
            Status = status;
        }
    }


    private List<WorldSection> _worldSections = new()
        {
            new WorldSection("World"),
        };

    public class WorldSection
    {
        public string Name { get; init; }

        public WorldSection(string name)
        {
            Name = name;
        }
    }

    private void DeleteWorldSection(WorldSection section)
    {
        if (_worldSections.Count <= 1)
        {
            return;
        }
        else
        {
            _worldSections.Remove(section);
        }
    }

    private void AddWorldSection()
    {
        var sectionCount = _worldSections.Count;

        if (sectionCount >= 5)
        {
            return;
        }
        else
        {
            sectionCount += 1;
            var newSection = new WorldSection($"World{sectionCount}");
            _worldSections.Add(newSection);
        }
    }

    private List<MindSection> _mindSections = new()
        {
            new MindSection("Mind"),
        };

    public class MindSection
    {
        public string Name { get; init; }

        public MindSection(string name)
        {
            Name = name;
        }
    }

    private void DeleteMindSection(MindSection section)
    {
        if (_mindSections.Count <= 1)
        {
            return;
        }
        else
        {
            _mindSections.Remove(section);
        }
    }

    private void AddMindSection()
    {
        var sectionCount = _mindSections.Count;

        if (sectionCount >= 5)
        {
            return;
        }
        else
        {
            sectionCount += 1;
            var newSection = new MindSection($"Mind{sectionCount}");
            _mindSections.Add(newSection);
        }
    }

    private List<HeartSection> _heartSections = new()
        {
            new HeartSection("Heart"),
        };

    public class HeartSection
    {
        public string Name { get; init; }

        public HeartSection(string name)
        {
            Name = name;
        }
    }

    private void DeleteHeartSection(HeartSection section)
    {
        if (_heartSections.Count <= 1)
        {
            return;
        }
        else
        {
            _heartSections.Remove(section);
        }
    }

    private void AddHeartSection()
    {
        var sectionCount = _heartSections.Count;

        if (sectionCount >= 5)
        {
            return;
        }
        else
        {
            sectionCount += 1;
            var newSection = new HeartSection($"Heart{sectionCount}");
            _heartSections.Add(newSection);
        }
    }
}