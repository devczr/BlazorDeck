@page "/"
@using BlazorDeck.Client.Authentication;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@inject HttpClient httpClient
@inject IJSRuntime js
@inject ICardService CardService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject ISnackbar Snackbar


<PageTitle>Home</PageTitle>

<MudDropContainer T="Card" Items="_cards" @ref="_dropContainer" ItemsSelector="@((item,column) => item.Status == column)" ItemDropped="CardUpdated" Class="d-flex flex-row mt-0 pt-0">
    <ChildContent>
        <MudGrid>

            <MudItem xs="4" Class="d-flex justify-center">
                @foreach (var item in _cardSlots.Where( c => c.SlotType == SlotType.World))
                {
                    <MudPaper Elevation="0" Width="160px" MinHeight="260px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg" Style="color:#D8E2DC">
                        <MudToolBar DisableGutters="true">
                            <MudText Typo="Typo.subtitle1"><b>World</b></MudText>
                            <MudSpacer />
                            <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                                <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteCardSlot(item))">Delete Slot</MudButton>
                                <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Add" OnClick="@( () => AddCardSlot(SlotType.World))">Add Slot</MudButton>
                            </MudMenu>
                        </MudToolBar>
                        @if (AddCardButton)
                        {
                            <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Add" OnClick="@( () => ShowCardSelectPopover())" Class="d-flex align-center justify-center">Add Card</MudButton>
                        }
                        <MudDropZone T="Card" Identifier="@item.Guid.ToString()" Class="d-flex mud-height-full align-center justify-center" />
                    </MudPaper>
                }
                <MudPopover Open="@CardSelectPopover" AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" Class="px-4 pt-4">
                    <div class="d-flex flex-column">
                        <MudText>Content of the popover can be anything.</MudText>
                        <MudButton OnClick="@CloseCardSelectPopover" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
                    </div>
                </MudPopover>
            </MudItem>

            <MudItem xs="4" Class="d-flex justify-center">
                @foreach (var item in _cardSlots.Where(c => c.SlotType == SlotType.Mind))
                {
                    <MudPaper Elevation="0" Width="160px" MinHeight="260px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg" Style="color:#D8E2DC">
                        <MudToolBar DisableGutters="true">
                            <MudText Typo="Typo.subtitle1"><b>Mind</b></MudText>
                            <MudSpacer />
                            <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                                <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteCardSlot(item))">Delete Slot</MudButton>
                                <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Add" OnClick="@( () => AddCardSlot(SlotType.Mind))">Add Slot</MudButton>
                            </MudMenu>
                        </MudToolBar>
                        @if (AddCardButton)
                        {
                            <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Add" OnClick="@( () => ShowCardSelectPopover())" Class="d-flex align-center justify-center">Add Card</MudButton>
                        }
                        <MudDropZone T="Card" Identifier="@item.Guid.ToString()" Class="d-flex mud-height-full align-center justify-center" />
                    </MudPaper>
                }
                <MudPopover Open="@CardSelectPopover" AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" Class="px-4 pt-4">
                    <div class="d-flex flex-column">
                        <MudText>Content of the popover can be anything.</MudText>
                        <MudButton OnClick="@CloseCardSelectPopover" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
                    </div>
                </MudPopover>
            </MudItem>

            <MudItem xs="4" Class="d-flex justify-center">
                @foreach (var item in _cardSlots.Where(c => c.SlotType == SlotType.Heart))
                {
                    <MudPaper Elevation="0" Width="160px" MinHeight="260px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg" Style="color:#D8E2DC">
                        <MudToolBar DisableGutters="true">
                            <MudText Typo="Typo.subtitle1"><b>Heart</b></MudText>
                            <MudSpacer />
                            <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                                <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteCardSlot(item))">Delete Slot</MudButton>
                                <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Add" OnClick="@( () => AddCardSlot(SlotType.Heart))">Add Slot</MudButton>
                            </MudMenu>
                        </MudToolBar>
                        @if (AddCardButton)
                        {
                            <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Add" OnClick="@( () => ShowCardSelectPopover())" Class="d-flex align-center justify-center">Add Card</MudButton>
                        }
                        <MudDropZone T="Card" Identifier="@item.Guid.ToString()" Class="d-flex mud-height-full align-center justify-center" />
                    </MudPaper>
                }
                <MudPopover Open="@CardSelectPopover" AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" Class="px-4 pt-4">
                    <div class="d-flex flex-column">
                        <MudText>Content of the popover can be anything.</MudText>
                        <MudButton OnClick="@CloseCardSelectPopover" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
                    </div>
                </MudPopover>
            </MudItem>

            <MudItem xs="12">
                <MudContainer Class="d-block align-center justify-center align-content-center mud-width-full pa-2">
                    <MudDropZone T="Card" Identifier="Hand" CanDrop="@((item) => true)" Class="rounded-lg mud-alert-text-normal pa-4 mt-6 mx-4 flex-grow-1 d-flex flex-wrap" />
                </MudContainer>
            </MudItem>
        </MudGrid>


    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation="25" Class="d-flex flex-grow-1 align-center justify-center rounded-lg pa-0 ma-2" Outlined="true" Width="132px" Height="228px">
            <MudContainer>
                <MudText>@context.Title</MudText>
                <MudSpacer></MudSpacer>
                <MudText>@context.Status</MudText>
            </MudContainer>
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>



<MudButton OnClick="@ButtonSwap">ChangeButton</MudButton>
<MudText>Button is:  @AddCardButton.ToString()</MudText>

@code {

    private MudDropContainer<Card>? _dropContainer;

    private List<Card> _cards = new();

    /* popover */
    public bool AddCardButton { get; set; }
    public bool CardSelectPopover { get; set; }
    public Origin AnchorOrigin { get; set; } = Origin.CenterCenter;
    public Origin TransformOrigin { get; set; } = Origin.CenterCenter;

    /* handling board events */
    protected override async Task OnInitializedAsync()
    {
        await CardService.GetCards();
        PlaceCards();
        AddCardButton = true;
    }

    private void PlaceCards()
    {
        foreach (var card in CardService.Cards)
        {
            if(string.IsNullOrEmpty(card.Status))
                card.Status = "Hand";

            _cards.Add(card);
        }
    }

    private void CardUpdated(MudItemDropInfo<Card> info)
    {
        if (info.Item.Status == info.DropzoneIdentifier)
            return;

        if(info.Item.Status != "Hand")
        {
            var previousSlot = (from s in _cardSlots
                                where s.Guid.ToString() == info.Item.Status
                                select s).SingleOrDefault();
            if (previousSlot is not null)
                DeleteCardSlot(previousSlot);
        }

        /*Check if the target CardSlot is empty*/
        var slot = (from s in _cardSlots
                    where s.Guid.ToString() == info.DropzoneIdentifier
                    select s).SingleOrDefault();
        if (slot is null)
            return;

        if (!slot.IsOccupied)
        {
            slot.IsOccupied = true;
            info.Item.Status = info.DropzoneIdentifier;
        }
        else
        {
            var type = slot.SlotType;
            AddCardSlot(type);
            info.Item.Status = _cardSlots.Last().Guid.ToString();
            _cardSlots.Last().IsOccupied = true;
        }

    }


    /*Card Popover events*/
    private void ShowCardSelectPopover()
    {
        CardSelectPopover = true;
    }

    private void CloseCardSelectPopover()
    {
        CardSelectPopover = false;
    }

    private void ButtonSwap()
    {
        AddCardButton = !AddCardButton;
    }


    private List<CardSlot> _cardSlots = new()
    {
        new CardSlot(SlotType.World),
        new CardSlot(SlotType.Mind),
        new CardSlot(SlotType.Heart)
    };

    public class CardSlot
    {
        public bool IsOccupied { get; set; }
        public SlotType SlotType { get; set; }
        public Guid Guid { get; set; }

        public CardSlot(SlotType slotType)
        {
            SlotType = slotType;
            Guid = Guid.NewGuid();
        }
    }



    private void DeleteCardSlot(CardSlot cardSlot)
    {
        var slotCount = (_cardSlots.Where(c => c.SlotType == cardSlot.SlotType).Count());

        if (slotCount <= 1)
        {
            //TODO: display popup warning user at least one slot is required
            ReturnToHand(cardSlot);
            cardSlot.IsOccupied = false;
            RefreshContainer();
            return;
        }
        else
        {
            ReturnToHand(cardSlot);
            _cardSlots.Remove(cardSlot);
        }
    }

    private void AddCardSlot(SlotType slotType)
    {
        //var slotCount = (_cardSlots.Where(c => c.SlotType == slotType).Count());

        //        if (slotCount >= 3)
        //        {
        //            //TODO: display popup warning user the max of this slot type has been reached
        //            return;
        //        }
        //        else
        //        {
        //            _cardSlots.Add(new CardSlot(slotType));
        //        }


        _cardSlots.Add(new CardSlot(slotType));
    }


    private void ReturnToHand(CardSlot cardSlot)
    {
        var card = (from c in _cards
                    where c.Status == cardSlot.Guid.ToString()
                    select c).SingleOrDefault();
        if (card is null)
            return;

        card.Status = "Hand";
        _dropContainer?.Refresh();

    }

    private void RefreshContainer()
    {
        _dropContainer?.Refresh();
    }

}